import cv2
import numpy as np
import time
import csv
from datetime import datetime
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from datetime import datetime
from pytz import timezone


CONFIDENCE_THRESHOLD = 0.3
INPUT_WIDTH = 320
INPUT_HEIGHT = 320
DETECTION_COOLDOWN = 5  
CAT_CLASS_ID = 15  
TRAP_ID = "001"  

SAVE_DIR = "detections"
CSV_FILE = os.path.join(SAVE_DIR, "detections_log.csv")
MODEL_PATH = "models/yolo11n.onnx"
WIFI_FILE = "wifi_config.txt"

os.makedirs(SAVE_DIR, exist_ok=True)

API_TOKEN = "7387365516:AAEEgkdcQWaCwMeLNwZ6qo-kGBVv2FRSqsE"
USER_ID = 1310738709  

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wi-Fi
user_states = {}

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")],
            [KeyboardButton(text="üì∂ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi"), KeyboardButton(text="üì∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ")],
            [KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"), KeyboardButton(text="üìã –ñ—É—Ä–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")],
            [KeyboardButton(text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/—á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Wi-Fi 
def save_wifi_config(ssid, password):
    try:
        with open(WIFI_FILE, "w", encoding='utf-8') as f:
            f.write(f"{ssid}\n{password}")
        print(f"‚úÖ Wi-Fi –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: SSID={ssid}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Wi-Fi: {e}")
        return False

def load_wifi_config():
    if os.path.exists(WIFI_FILE):
        try:
            with open(WIFI_FILE, encoding='utf-8') as f:
                lines = f.read().splitlines()
                if len(lines) >= 2:
                    print(f"üì∂ –ó–∞–≥—Ä—É–∂–µ–Ω—ã Wi-Fi –¥–∞–Ω–Ω—ã–µ: SSID={lines[0]}")
                    return lines[0], lines[1]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Wi-Fi –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    return "", ""

def apply_wifi_config():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Wi-Fi –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç–µ)"""
    ssid, password = load_wifi_config()
    if ssid and password:
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi: {ssid}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi –Ω–∞ –ø–ª–∞—Ç–µ
        # import subprocess
        # subprocess.run(['nmcli', 'dev', 'wifi', 'connect', ssid, 'password', password])
        return True
    return False

async def send_error_alert(message):
    try:
        await bot.send_message(chat_id=USER_ID, text=f"‚ùó –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}: {message}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–æ–π {TRAP_ID}!

üéØ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ç–æ–≤
üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∂—É—Ä–Ω–∞–ª

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
async def status_handler(message: types.Message):
    ssid, _ = load_wifi_config()
    wifi_status = f"üì∂ Wi-Fi: {ssid if ssid else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    model_exists = "‚úÖ" if os.path.exists(MODEL_PATH) else "‚ùå"
    csv_exists = "‚úÖ" if os.path.exists(CSV_FILE) else "‚ùå"
    
    status_text = f"""üìä –°—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}:

{wifi_status}
YOLO –º–æ–¥–µ–ª—å: {model_exists}
–ñ—É—Ä–Ω–∞–ª: {csv_exists}
–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏: {CONFIDENCE_THRESHOLD}
–ö—É–ª–¥–∞—É–Ω: {DETECTION_COOLDOWN}—Å
–ö–ª–∞—Å—Å: {CAT_CLASS_ID} (–∫–æ—Ç)

üîß ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {TRAP_ID}"""
    
    await message.answer(status_text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "üì∂ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi")
async def wifi_settings_handler(message: types.Message):
    ssid, _ = load_wifi_config()
    current_wifi = f"–¢–µ–∫—É—â–∏–π SSID: {ssid}" if ssid else "Wi-Fi –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    text = f"""üì∂ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}

{current_wifi}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
SSID –ø–∞—Ä–æ–ª—å

–ù–∞–ø—Ä–∏–º–µ—Ä: MyWiFi mypassword123"""
    
    user_states[message.from_user.id] = "waiting_wifi"
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@dp.message(lambda message: message.text == "üì∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ")
async def camera_info_handler(message: types.Message):
    text = f"""üì∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–µ—Ä–µ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}:

–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Ö–æ–¥–∞: {INPUT_WIDTH}x{INPUT_HEIGHT}
–î–µ—Ç–µ–∫—Ü–∏—è: YOLO11n
–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {CONFIDENCE_THRESHOLD}
–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º–∏: {DETECTION_COOLDOWN}—Å
–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {SAVE_DIR}/"""
    
    await message.answer(text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏")
async def detection_settings_handler(message: types.Message):
    text = f"""üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}:

–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {CONFIDENCE_THRESHOLD}
–ö—É–ª–¥–∞—É–Ω: {DETECTION_COOLDOWN} —Å–µ–∫—É–Ω–¥
ID –∫–ª–∞—Å—Å–∞ '–∫–æ—Ç': {CAT_CLASS_ID}
–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞: {INPUT_WIDTH}x{INPUT_HEIGHT}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    
    await message.answer(text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "üìã –ñ—É—Ä–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π")
async def log_handler(message: types.Message):
    try:
        if os.path.exists(CSV_FILE):
            with open(CSV_FILE, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                total = len(lines) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                recent = lines[-6:-1] if len(lines) > 6 else lines[1:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                
                text = f"üìã –ñ—É—Ä–Ω–∞–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}:\n\n"
                text += f"üìä –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π: {total}\n\n"
                
                if recent:
                    text += "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:\n"
                    for line in reversed(recent):
                        parts = line.strip().split(',')
                        if len(parts) >= 2:
                            text += f"‚Ä¢ {parts[0]} - {parts[1]}\n"
                else:
                    text += "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = f"üìã –ñ—É—Ä–Ω–∞–ª —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID} –ø—É—Å—Ç"
            
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}"
    
    await message.answer(text, reply_markup=get_main_menu())

@dp.message(lambda message: message.text == "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫—É")
async def shutdown_handler(message: types.Message):
    await message.answer(f"üîå –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}...", reply_markup=ReplyKeyboardRemove())
    print(f"‚ùå –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è graceful shutdown
    os._exit(0)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Wi-Fi –¥–∞–Ω–Ω—ã—Ö
@dp.message(lambda message: user_states.get(message.from_user.id) == "waiting_wifi")
async def process_wifi_data(message: types.Message):
    try:
        parts = message.text.strip().split()
        if len(parts) >= 2:
            ssid = parts[0]
            password = " ".join(parts[1:])  # –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
            
            if save_wifi_config(ssid, password):
                await message.answer(f"‚úÖ Wi-Fi –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\nSSID: {ssid}\n\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=get_main_menu())
                
                # –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if apply_wifi_config():
                    await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi {ssid} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                else:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Wi-Fi")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Wi-Fi –¥–∞–Ω–Ω—ã—Ö", reply_markup=get_main_menu())
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: SSID –ø–∞—Ä–æ–ª—å", reply_markup=get_main_menu())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_main_menu())
    finally:
        user_states.pop(message.from_user.id, None)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_handler(message: types.Message):
    await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_menu())

async def send_cat_found_alert(image_path, location_info):
    try:
        photo = FSInputFile(image_path)
        now = datetime.now(timezone("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
        caption = f"üê± –§–æ—Ç–æ–ª–æ–≤—É—à–∫–∞ {TRAP_ID}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ç!\nüìç –ú–µ—Å—Ç–æ: {location_info}\nüïí –í—Ä–µ–º—è: {now}"
        await bot.send_photo(chat_id=USER_ID, photo=photo, caption=caption)
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ {now}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def detect_cat_and_get_box(outs, frame):
    h, w = frame.shape[:2]
    x_scale = w / INPUT_WIDTH
    y_scale = h / INPUT_HEIGHT
    output = outs[0].squeeze(0).T
    for i in range(output.shape[0]):
        row = output[i]
        scores = row[4:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if class_id == CAT_CLASS_ID and confidence > CONFIDENCE_THRESHOLD:
            cx, cy, bw, bh = row[:4]
            cx *= x_scale
            cy *= y_scale
            bw *= x_scale
            bh *= y_scale
            x1, y1 = int(cx - bw / 2), int(cy - bh / 2)
            x2, y2 = int(cx + bw / 2), int(cy + bh / 2)
            return True, (x1, y1, x2, y2), confidence
    return False, None, None

async def main_loop():
    global last_detection_time
    
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}...")
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ Wi-Fi –Ω–∞—Å—Ç—Ä–æ–µ–∫
    ssid, password = load_wifi_config()
    if ssid:
        print(f"Wi-Fi –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {ssid}")
        apply_wifi_config()
    else:
        print("‚ö†Ô∏è Wi-Fi –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ...")
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        error_msg = "–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        print(f"‚ùå {error_msg}")
        await send_error_alert(error_msg)
        return
    print("–ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    
    # –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print("–ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏...")
    if not os.path.exists(MODEL_PATH):
        error_msg = f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}"
        print(f"‚ùå {error_msg}")
        await send_error_alert(error_msg)
        cap.release()
        return
    
    net = cv2.dnn.readNet(MODEL_PATH)
    print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, 'w', newline='', encoding='utf-8') as f:
            csv.writer(f).writerow(["Date/Time", "Image name"])
        print("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞")
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    ready_msg = f"–§–æ—Ç–æ–ª–æ–≤—É—à–∫–∞ {TRAP_ID} –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
    print(f"‚úÖ {ready_msg}")
    await bot.send_message(chat_id=USER_ID, text=ready_msg)
    
    print(f"–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ—Ä–æ–≥: {CONFIDENCE_THRESHOLD}, –∫—É–ª–¥–∞—É–Ω: {DETECTION_COOLDOWN}—Å)")
    
    try:
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                print("‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã")
                continue

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
            blob = cv2.dnn.blobFromImage(frame, 1/255.0, (INPUT_WIDTH, INPUT_HEIGHT), swapRB=True)
            net.setInput(blob)
            outs = net.forward(net.getUnconnectedOutLayersNames())

            detected, box, conf = detect_cat_and_get_box(outs, frame)
            if detected:
                now = time.time()
                if now - last_detection_time > DETECTION_COOLDOWN:
                    x1, y1, x2, y2 = box
                    snapshot = frame.copy()
                    cv2.rectangle(snapshot, (x1, y1), (x2, y2), (0, 255, 0), 2)
                    cv2.putText(snapshot, f"Cat {conf:.2f}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                    timestamp = datetime.now(timezone("Europe/Moscow")).strftime("%Y-%m-%d_%H-%M-%S")
                    filename = f"cat_{TRAP_ID}_{timestamp}.jpg"
                    filepath = os.path.join(SAVE_DIR, filename)
                    cv2.imwrite(filepath, snapshot)

                    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
                        csv.writer(f).writerow([timestamp, filename])

                    print(f"üê± [{timestamp}] –ö–æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2f}, —Ñ–∞–π–ª: {filename}")
                    await send_cat_found_alert(filepath, f"–ö–∞–º–µ—Ä–∞ {TRAP_ID}")
                    last_detection_time = now
            
            # –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 1000 –∫–∞–¥—Ä–æ–≤ (–≤ –∫–æ–Ω—Å–æ–ª–∏)
            frame_count += 1
            if frame_count % 1000 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {frame_count}")
                
            await asyncio.sleep(0.1)
    finally:
        cap.release()
        print("–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

last_detection_time = 0

async def main():   
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}")
        
        startup_message = f"""ü§ñ –§–æ—Ç–æ–ª–æ–≤—É—à–∫–∞ {TRAP_ID} –∑–∞–ø—É—â–µ–Ω–∞!

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É"""
        
        await bot.send_message(chat_id=USER_ID, text=startup_message)
        
        # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            main_loop(),
            dp.start_polling(bot)
        )
    except KeyboardInterrupt:
        print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ç–æ–ª–æ–≤—É—à–∫–∏ {TRAP_ID}")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await send_error_alert(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        print(f"–§–æ—Ç–æ–ª–æ–≤—É—à–∫–∞ {TRAP_ID} –æ—Ç–∫–ª—é—á–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())